
// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let wishes = [];
let currentWishIndex = 0;
let wishInterval;
let blownCandles = 0;
let totalCandles = 5;
let timerInterval;
let audioContext;
let micStream;
let analyser;
let isListening = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üéÇ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è" –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    setupEditor();
    setupEventListeners();
    checkURLParams();
    setupAudioContext();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
function setupEditor() {
    updatePreview();
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
    const inputs = ['birthdayName', 'senderName', 'fontSelect', 'backgroundSelect', 'textColorSelect'];
    inputs.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.addEventListener('input', updatePreview);
            element.addEventListener('change', updatePreview);
        }
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Enter –≤ –ø–æ–ª–µ –ø–æ–∂–µ–ª–∞–Ω–∏–π
    const wishInput = document.getElementById('wishInput');
    if (wishInput) {
        wishInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                addWish();
            }
        });
    }
    
    // –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ
    document.addEventListener('click', requestMicrophoneAccess, { once: true });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function setupAudioContext() {
    try {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        console.log('üéµ –ê—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω');
    } catch (e) {
        console.log('‚ùå AudioContext –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', e);
    }
}

// –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
function requestMicrophoneAccess() {
    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        navigator.mediaDevices.getUserMedia({ audio: true })
            .then(function(stream) {
                micStream = stream;
                console.log('üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω');
            })
            .catch(function(err) {
                console.log('‚ùå –ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', err);
            });
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è
function addWish() {
    const wishInput = document.getElementById('wishInput');
    const wishSender = document.getElementById('wishSender');
    const wishFont = document.getElementById('wishFont');
    const wishBackground = document.getElementById('wishBackground');
    const wishTextColor = document.getElementById('wishTextColor');
    
    const wishText = wishInput.value.trim();
    const senderText = wishSender.value.trim() || '–ê–Ω–æ–Ω–∏–º';
    
    if (wishText) {
        const wish = {
            text: wishText,
            sender: senderText,
            font: wishFont.value,
            background: wishBackground.value,
            textColor: wishTextColor.value
        };
        
        wishes.push(wish);
        wishInput.value = '';
        wishSender.value = '';
        updateWishList();
        updatePreview();
        
        // –ó–≤—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∂–µ–ª–∞–Ω–∏—è
        playBirthdaySound(800, 200);
        
        console.log('‚ú® –ü–æ–∂–µ–ª–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:', wish);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π
function updateWishList() {
    const wishList = document.getElementById('wishList');
    if (!wishList) return;
    
    wishList.innerHTML = '';
    
    wishes.forEach((wish, index) => {
        const wishItem = document.createElement('div');
        wishItem.className = 'wish-item';
        wishItem.innerHTML = `
            <div class="wish-item-content">
                <div class="wish-item-text">${wish.text}</div>
                <div class="wish-item-details">–û—Ç: ${wish.sender} ‚Ä¢ ${wish.font} ‚Ä¢ ${wish.background} ‚Ä¢ ${wish.textColor}</div>
            </div>
            <button onclick="removeWish(${index})">–£–¥–∞–ª–∏—Ç—å</button>
        `;
        wishList.appendChild(wishItem);
    });
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è
function removeWish(index) {
    wishes.splice(index, 1);
    updateWishList();
    updatePreview();
    playBirthdaySound(600, 150);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function updatePreview() {
    const name = document.getElementById('birthdayName')?.value || '–ò–ú–Ø –ò–ú–ï–ù–ò–ù–ù–ò–ö–ê';
    const sender = document.getElementById('senderName')?.value || '–í–∞—à–µ –∏–º—è';
    const font = document.getElementById('fontSelect')?.value || 'Dancing Script';
    const background = document.getElementById('backgroundSelect')?.value || 'purple-pink';
    const textColor = document.getElementById('textColorSelect')?.value || 'neon-pink';
    
    const preview = document.getElementById('preview');
    const previewName = document.getElementById('previewName');
    const previewMainSender = document.getElementById('previewMainSender');
    const previewWishes = document.getElementById('previewWishes');
    
    if (!preview) return;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ –∏ —à—Ä–∏—Ñ—Ç–∞
    preview.className = `preview-card bg-${background}`;
    preview.style.fontFamily = font;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    if (previewName) {
        previewName.textContent = name.toUpperCase();
        previewName.className = `neon-preview-secondary ${textColor}`;
    }
    if (previewMainSender) previewMainSender.textContent = `–û—Ç: ${sender}`;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏–π –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ
    if (previewWishes) {
        previewWishes.innerHTML = '';
        
        if (wishes.length > 0) {
            wishes.forEach(wish => {
                const wishElement = document.createElement('div');
                wishElement.className = 'preview-wish-item';
                wishElement.style.fontFamily = wish.font;
                wishElement.innerHTML = `
                    <p class="preview-wish-text ${wish.textColor}">${wish.text}</p>
                    <p class="preview-wish-sender">‚Äî ${wish.sender}</p>
                `;
                previewWishes.appendChild(wishElement);
            });
        } else {
            const defaultWish = document.createElement('div');
            defaultWish.className = 'preview-wish-item';
            defaultWish.innerHTML = `
                <p class="preview-wish-text">–î–æ–±–∞–≤—å—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è...</p>
                <p class="preview-wish-sender">‚Äî –û—Ç –∫–æ–≥–æ</p>
            `;
            previewWishes.appendChild(defaultWish);
        }
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
function generateLink() {
    const name = document.getElementById('birthdayName')?.value;
    const date = document.getElementById('birthdayDate')?.value;
    const sender = document.getElementById('senderName')?.value;
    const font = document.getElementById('fontSelect')?.value || 'Dancing Script';
    const background = document.getElementById('backgroundSelect')?.value || 'purple-pink';
    const textColor = document.getElementById('textColorSelect')?.value || 'neon-pink';
    
    if (!name || !date || !sender || wishes.length === 0) {
        alert('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–∂–µ–ª–∞–Ω–∏–µ!');
        return;
    }
    
    const params = new URLSearchParams({
        name: name,
        date: date,
        sender: sender,
        font: font,
        background: background,
        textColor: textColor,
        wishes: JSON.stringify(wishes)
    });
    
    const link = `${window.location.origin}${window.location.pathname}?${params.toString()}`;
    
    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    if (navigator.clipboard && navigator.clipboard.writeText) {
        navigator.clipboard.writeText(link).then(function() {
            alert('üéâ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –∏–º–µ–Ω–∏–Ω–Ω–∏–∫—É.');
            playBirthdaySound(1000, 500);
        }).catch(function() {
            fallbackCopyText(link);
        });
    } else {
        fallbackCopyText(link);
    }
}

// Fallback –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
function fallbackCopyText(text) {
    const textArea = document.createElement('textarea');
    textArea.value = text;
    textArea.style.position = 'fixed';
    textArea.style.left = '-999999px';
    textArea.style.top = '-999999px';
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
        document.execCommand('copy');
        alert('üéâ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –∏–º–µ–Ω–∏–Ω–Ω–∏–∫—É.');
        playBirthdaySound(1000, 500);
    } catch (err) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç:', err);
        prompt('üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É:', text);
    }
    
    document.body.removeChild(textArea);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
function checkURLParams() {
    const urlParams = new URLSearchParams(window.location.search);
    
    if (urlParams.has('name')) {
        console.log('üéä –ù–∞–π–¥–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∑–∞–ø—É—Å–∫ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è');
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è
        document.getElementById('editor').classList.remove('active');
        document.getElementById('celebration').classList.add('active');
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ URL
        const name = urlParams.get('name');
        const date = urlParams.get('date');
        const sender = urlParams.get('sender');
        const font = urlParams.get('font') || 'Dancing Script';
        const background = urlParams.get('background') || 'purple-pink';
        const textColor = urlParams.get('textColor') || 'neon-pink';
        
        try {
            wishes = JSON.parse(urlParams.get('wishes') || '[]');
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π:', e);
            wishes = [];
        }
        
        console.log('üìÑ –î–∞–Ω–Ω—ã–µ –∏–∑ URL:', { name, date, sender, wishes });
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        document.body.style.fontFamily = font;
        document.getElementById('celebration').className = `page active bg-${background}`;
        
        // –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–≤—É–∫–æ–≤
        playBackgroundMusic();
        
        // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
        if (date) {
            startTimer(new Date(date), name, sender, textColor, font, background);
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
function startTimer(targetDate, name, sender, textColor, font, background) {
    const timerSection = document.getElementById('timerSection');
    const cakeSection = document.getElementById('cakeSection');
    
    if (!timerSection || !cakeSection) return;
    
    timerSection.style.display = 'flex';
    cakeSection.style.display = 'none';
    
    function updateTimer() {
        const now = new Date();
        const distance = targetDate - now;
        
        if (distance > 0) {
            const days = Math.floor(distance / (1000 * 60 * 60 * 24));
            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((distance % (1000 * 60)) / 1000);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è
            const daysEl = document.getElementById('days');
            const hoursEl = document.getElementById('hours');
            const minutesEl = document.getElementById('minutes');
            const secondsEl = document.getElementById('seconds');
            
            if (daysEl) daysEl.textContent = days;
            if (hoursEl) hoursEl.textContent = hours;
            if (minutesEl) minutesEl.textContent = minutes;
            if (secondsEl) secondsEl.textContent = seconds;
        } else {
            clearInterval(timerInterval);
            // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–æ—Ä—Ç—É
            timerSection.style.display = 'none';
            cakeSection.style.display = 'flex';
            
            resetCandles();
            setupBlowDetection();
            
            // –ó–≤—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
            playBirthdaySound(1200, 800);
            
            console.log('‚è∞ –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ! –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–æ—Ä—Ç—É.');
        }
    }
    
    updateTimer();
    timerInterval = setInterval(updateTimer, 1000);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∑–≤—É–∫–∞ –¥–ª—è –∑–∞–¥—É–≤–∞–Ω–∏—è —Å–≤–µ—á–µ–π
function setupBlowDetection() {
    if (!micStream || !audioContext) {
        console.log('‚ùå –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∏–ª–∏ –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        return;
    }
    
    try {
        if (audioContext.state === 'suspended') {
            audioContext.resume();
        }
        
        analyser = audioContext.createAnalyser();
        const microphone = audioContext.createMediaStreamSource(micStream);
        const dataArray = new Uint8Array(analyser.frequencyBinCount);
        
        microphone.connect(analyser);
        analyser.fftSize = 256;
        
        let lastBlowTime = 0;
        isListening = true;
        
        function detectBlow() {
            if (!isListening) return;
            
            analyser.getByteFrequencyData(dataArray);
            
            // –ê–Ω–∞–ª–∏–∑ –∑–≤—É–∫–∞ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥—É—Ç—å—è
            let sum = 0;
            let highFreqSum = 0;
            
            for (let i = 0; i < dataArray.length; i++) {
                sum += dataArray[i];
                if (i > dataArray.length * 0.7) { // –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã
                    highFreqSum += dataArray[i];
                }
            }
            
            let average = sum / dataArray.length;
            let highFreqAverage = highFreqSum / (dataArray.length * 0.3);
            
            const now = Date.now();
            
            // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ–≥–æ –∑–≤—É–∫–∞ –¥—É—Ç—å—è
            if (average > 50 && highFreqAverage > 30 && 
                document.getElementById('cakeSection').style.display === 'flex' &&
                now - lastBlowTime > 1000) {
                
                console.log('üí® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥—É—Ç—å–µ!', { average, highFreqAverage });
                blowRandomCandle();
                lastBlowTime = now;
            }
            
            if (isListening) {
                requestAnimationFrame(detectBlow);
            }
        }
        
        detectBlow();
        console.log('üé§ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥—É—Ç—å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∑–≤—É–∫–∞:', error);
    }
}

// –ó–∞–¥—É–≤–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–≤–µ—á–∏
function blowRandomCandle() {
    const activeCandles = document.querySelectorAll('.candle.active');
    if (activeCandles.length > 0) {
        const randomIndex = Math.floor(Math.random() * activeCandles.length);
        blowOutCandle(activeCandles[randomIndex]);
    }
}

// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–≤–µ—á–µ–π
function resetCandles() {
    blownCandles = 0;
    const candles = document.querySelectorAll('.candle');
    candles.forEach(candle => {
        candle.classList.add('active');
        candle.classList.remove('blown-out');
    });
    
    console.log('üïØÔ∏è –°–≤–µ—á–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
}

// –ó–∞–¥—É–≤–∞–Ω–∏–µ —Å–≤–µ—á–∏
function blowOutCandle(candleElement) {
    if (!candleElement.classList.contains('active')) return;
    
    candleElement.classList.remove('active');
    candleElement.classList.add('blown-out');
    blownCandles++;
    
    // –ó–≤—É–∫ –∑–∞–¥—É–≤–∞–Ω–∏—è —Å–≤–µ—á–∏
    playBirthdaySound(600, 300);
    
    console.log(`üïØÔ∏è –°–≤–µ—á–∞ –∑–∞–¥—É—Ç–∞! –û—Å—Ç–∞–ª–æ—Å—å: ${totalCandles - blownCandles}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Å–≤–µ—á–∏ –∑–∞–¥—É—Ç—ã
    if (blownCandles >= totalCandles) {
        setTimeout(function() {
            startCelebration();
        }, 1000);
    }
}

// –ù–∞—á–∞–ª–æ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è
function startCelebration() {
    const cakeSection = document.getElementById('cakeSection');
    const partySection = document.getElementById('partySection');
    
    if (!cakeSection || !partySection) return;
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    isListening = false;
    
    console.log('üéâ –ù–∞—á–∞–ª–æ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è!');
    
    // –ó–≤—É–∫ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è
    playBirthdaySound(1500, 1000);
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—é
    cakeSection.style.display = 'none';
    partySection.style.display = 'flex';
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è
    updatePartyData();
    
    // –ó–∞–ø—É—Å–∫ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    setTimeout(() => startConfetti(), 500);
    setTimeout(() => startFireworks(), 1000);
    
    // –ó–∞–ø—É—Å–∫ —Ä–æ—Ç–∞—Ü–∏–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π
    setTimeout(() => startWishRotation(), 2000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è
function updatePartyData() {
    const urlParams = new URLSearchParams(window.location.search);
    const name = urlParams.get('name');
    const textColor = urlParams.get('textColor') || 'neon-pink';
    
    const partyName = document.getElementById('partyName');
    if (partyName && name) {
        partyName.textContent = name.toUpperCase();
        partyName.className = `party-name neon-text ${textColor}`;
    }
}

// –ó–∞–ø—É—Å–∫ —Ä–æ—Ç–∞—Ü–∏–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π
function startWishRotation() {
    if (wishes.length === 0) {
        console.log('‚ùå –ù–µ—Ç –ø–æ–∂–µ–ª–∞–Ω–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞');
        return;
    }
    
    console.log('üîÑ –ó–∞–ø—É—Å–∫ —Ä–æ—Ç–∞—Ü–∏–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π:', wishes.length);
    
    function showNextWish() {
        const currentWish = document.getElementById('currentWish');
        const currentWishSender = document.getElementById('currentWishSender');
        const wishCard = document.getElementById('wishCard');
        
        if (!currentWish || !currentWishSender || !wishCard) return;
        
        if (currentWishIndex >= wishes.length) {
            currentWishIndex = 0;
        }
        
        const wish = wishes[currentWishIndex];
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –ø–æ–∂–µ–ª–∞–Ω–∏—è
        wishCard.className = `wish-card bg-${wish.background}`;
        wishCard.style.fontFamily = wish.font;
        
        currentWish.textContent = wish.text;
        currentWish.className = `wish-text ${wish.textColor}`;
        
        currentWishSender.textContent = `‚Äî ${wish.sender}`;
        currentWishSender.className = `wish-sender ${wish.textColor}`;
        
        console.log('üíù –ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ–∂–µ–ª–∞–Ω–∏–µ:', wish.text, '–æ—Ç', wish.sender);
        
        currentWishIndex = (currentWishIndex + 1) % wishes.length;
    }
    
    showNextWish();
    wishInterval = setInterval(showNextWish, 8000);
}

// –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
function startConfetti() {
    const confettiContainer = document.getElementById('confetti');
    if (!confettiContainer) return;
    
    const colors = ['#ff006e', '#8b5cf6', '#fbbf24', '#06d6a0', '#ff073a', '#00ffff', '#ffd700', '#ff8c00'];
    
    console.log('üéä –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏');
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
    confettiContainer.innerHTML = '';
    
    for (let i = 0; i < 100; i++) {
        setTimeout(function() {
            const confetti = document.createElement('div');
            confetti.className = 'confetti-piece';
            confetti.style.left = Math.random() * 100 + '%';
            confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
            confetti.style.animationDelay = Math.random() * 2 + 's';
            confetti.style.animationDuration = (Math.random() * 2 + 3) + 's';
            confettiContainer.appendChild(confetti);
            
            setTimeout(function() {
                if (confetti.parentNode) {
                    confetti.remove();
                }
            }, 6000);
        }, i * 50);
    }
    
    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –∫–∞–∂–¥—ã–µ 4 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        const partySection = document.getElementById('partySection');
        if (partySection && partySection.style.display === 'flex') {
            startConfetti();
        }
    }, 4000);
}

// –ó–∞–ø—É—Å–∫ —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–æ–≤
function startFireworks() {
    const fireworksContainer = document.getElementById('fireworks');
    if (!fireworksContainer) return;
    
    const colors = ['#ff006e', '#8b5cf6', '#fbbf24', '#06d6a0', '#ff073a', '#00ffff', '#ffd700', '#ff8c00'];
    
    console.log('üéÜ –ó–∞–ø—É—Å–∫ —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–æ–≤');
    
    // –ó–≤—É–∫ —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–æ–≤
    playBirthdaySound(1800, 500);
    
    for (let i = 0; i < 8; i++) {
        setTimeout(function() {
            const firework = document.createElement('div');
            firework.className = 'firework';
            firework.style.left = (Math.random() * 80 + 10) + '%';
            firework.style.top = (Math.random() * 80 + 10) + '%';
            firework.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
            firework.style.width = Math.random() * 30 + 20 + 'px';
            firework.style.height = firework.style.width;
            firework.style.boxShadow = `0 0 30px ${colors[Math.floor(Math.random() * colors.length)]}`;
            fireworksContainer.appendChild(firework);
            
            setTimeout(function() {
                if (firework.parentNode) {
                    firework.remove();
                }
            }, 2000);
        }, i * 500);
    }
    
    // –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 6 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        const partySection = document.getElementById('partySection');
        if (partySection && partySection.style.display === 'flex') {
            startFireworks();
        }
    }, 6000);
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
function playBirthdaySound(frequency = 800, duration = 300) {
    try {
        if (!audioContext) {
            setupAudioContext();
        }
        
        if (audioContext) {
            if (audioContext.state === 'suspended') {
                audioContext.resume();
            }
            
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.value = frequency;
            oscillator.type = 'sine';
            
            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration / 1000);
            
            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + duration / 1000);
        }
    } catch (error) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫:', error);
    }
}

// –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞ (–º–µ–ª–æ–¥–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è)
function playBackgroundMusic() {
    if (!audioContext) return;
    
    // –ú–µ–ª–æ–¥–∏—è "Happy Birthday" –≤ –≤–∏–¥–µ —á–∞—Å—Ç–æ—Ç
    const melody = [
        { freq: 261.63, duration: 0.5 }, // C
        { freq: 261.63, duration: 0.5 }, // C
        { freq: 293.66, duration: 1 },   // D
        { freq: 261.63, duration: 1 },   // C
        { freq: 349.23, duration: 1 },   // F
        { freq: 329.63, duration: 2 },   // E
    ];
    
    let currentTime = audioContext.currentTime + 1;
    
    melody.forEach(note => {
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.value = note.freq;
        oscillator.type = 'triangle';
        
        gainNode.gain.setValueAtTime(0.05, currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, currentTime + note.duration);
        
        oscillator.start(currentTime);
        oscillator.stop(currentTime + note.duration);
        
        currentTime += note.duration;
    });
}

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', function() {
    isListening = false;
    if (timerInterval) {
        clearInterval(timerInterval);
    }
    if (wishInterval) {
        clearInterval(wishInterval);
    }
    if (micStream) {
        micStream.getTracks().forEach(track => track.stop());
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', function(e) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', e.error);
});

console.log('üéÇ –°–∫—Ä–∏–ø—Ç "–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è" –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω!');
